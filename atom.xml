<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XtestW&#39;s Blog</title>
  
  
  <link href="http://xtestw.com/atom.xml" rel="self"/>
  
  <link href="http://xtestw.com/"/>
  <updated>2025-04-29T13:06:01.436Z</updated>
  <id>http://xtestw.com/</id>
  
  <author>
    <name>xtestw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kafka重复消费？</title>
    <link href="http://xtestw.com/2025/04/29/kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%EF%BC%9F/"/>
    <id>http://xtestw.com/2025/04/29/kafka%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%EF%BC%9F/</id>
    <published>2025-04-29T13:03:02.000Z</published>
    <updated>2025-04-29T13:06:01.436Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题阐述&quot;&gt;&lt;a href=&quot;#问题阐述&quot; class=&quot;headerlink&quot; title=&quot;问题阐述&quot;&gt;&lt;/a&gt;问题阐述&lt;/h2&gt;&lt;p&gt;有个业务场景，是通过kafka给审核中台推审核任务，链路是 离线获取待审核直播间 -&amp;gt; 推送kafka -&amp;gt; 业</summary>
      
    
    
    
    <category term="疑难杂症" scheme="http://xtestw.com/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
    <category term="kafka" scheme="http://xtestw.com/tags/kafka/"/>
    
    <category term="QA" scheme="http://xtestw.com/tags/QA/"/>
    
  </entry>
  
  <entry>
    <title>goolge无法读取此站点地图</title>
    <link href="http://xtestw.com/2025/04/24/goolge%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E6%AD%A4%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE/"/>
    <id>http://xtestw.com/2025/04/24/goolge%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E6%AD%A4%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE/</id>
    <published>2025-04-24T07:20:12.000Z</published>
    <updated>2025-04-24T07:35:33.303Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;省流结论&quot;&gt;&lt;a href=&quot;#省流结论&quot; class=&quot;headerlink&quot; title=&quot;省流结论&quot;&gt;&lt;/a&gt;省流结论&lt;/h2&gt;&lt;p&gt;sitemap.xml 能够正常访问，且格式内容没问题的情况下， 提交地址的时候尝试在sitemap.xml后面加”/“， </summary>
      
    
    
    
    <category term="疑难杂症" scheme="http://xtestw.com/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
  </entry>
  
  <entry>
    <title>领域划分的一些思考</title>
    <link href="http://xtestw.com/2025/04/22/%E9%A2%86%E5%9F%9F%E5%88%92%E5%88%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://xtestw.com/2025/04/22/%E9%A2%86%E5%9F%9F%E5%88%92%E5%88%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</id>
    <published>2025-04-22T08:16:38.000Z</published>
    <updated>2025-04-22T08:22:49.323Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;为什么要划分&quot;&gt;&lt;a href=&quot;#为什么要划分&quot; class=&quot;headerlink&quot; title=&quot;为什么要划分&quot;&gt;&lt;/a&gt;&lt;strong&gt;为什么要划分&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;对于一个业务系统，以业务为核心，随着业务发展，在业务和工程侧必然导致以下2种情况的发生&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/%E6%88%91%E7%9A%84%E9%A2%86%E5%9F%9F%E8%A7%82-%E5%85%B3%E4%BA%8E%E9%A2%86%E5%9F%9F%E5%88%92%E5%88%86/out.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;最终导致一个问题：业务支持效率降低&lt;/p&gt;
&lt;p&gt;解决的方法： &lt;strong&gt;拆&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原则：组织/系统围绕业务的发展进行迭代升级&lt;/p&gt;
&lt;p&gt;目标：既需要解决当下业务支持效率降低的问题，又能够很好的支撑业务长期稳定发展。 &lt;/p&gt;
&lt;p&gt;对于业务初期，通常会采用大的单体工程方式支持早期的快速发展，但是明显的业务膨胀带来代码量的急剧攀升，团队规模的扩大带来协作风险的增加，很难继续支持业务高速发展，故需要进行相应的领域拆分，以保持对业务的迭代的高效支撑，而 DDD 提供了一种从业务出发的建模方法，能很好满足我们的目标要求，故通过领域化，分而治之，进行我们的系统建设。&lt;/p&gt;</summary>
    
    
    
    
    <category term="领域划分" scheme="http://xtestw.com/tags/%E9%A2%86%E5%9F%9F%E5%88%92%E5%88%86/"/>
    
    <category term="业务建模" scheme="http://xtestw.com/tags/%E4%B8%9A%E5%8A%A1%E5%BB%BA%E6%A8%A1/"/>
    
    <category term="架构思考" scheme="http://xtestw.com/tags/%E6%9E%B6%E6%9E%84%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>DDD 领域建模笔记</title>
    <link href="http://xtestw.com/2021/03/15/DDD-%E9%A2%86%E5%9F%9F%E5%BB%BA%E6%A8%A1/"/>
    <id>http://xtestw.com/2021/03/15/DDD-%E9%A2%86%E5%9F%9F%E5%BB%BA%E6%A8%A1/</id>
    <published>2021-03-15T12:34:25.000Z</published>
    <updated>2024-12-31T17:54:51.831Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;核心概念&quot;&gt;&lt;a href=&quot;#核心概念&quot; class=&quot;headerlink&quot; title=&quot;核心概念&quot;&gt;&lt;/a&gt;核心概念&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;战术设计(Tactic DDD): Entity, Value Object; Aggregate, Root Entity, Service, Domain Event; Factory, Repository&lt;br&gt;战略设计(Strategic DDD): Bounded Context, Context Map; Published Language, Shared Kernel, Open Host Service, Customer-Supplier, Conformist, Anti Corruption Layer (context relationship types)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;Entity（实体）&quot;&gt;&lt;a href=&quot;#Entity（实体）&quot; class=&quot;headerlink&quot; title=&quot;Entity（实体）&quot;&gt;&lt;/a&gt;Entity（实体）&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;存在 2 点特征&lt;ul&gt;
&lt;li&gt;唯一标志：当一些对象不是由属性定义，而是由一个唯一标志定义的话，我们就可以认为它是一个实体。&lt;/li&gt;
&lt;li&gt;连续性：对象的连续性体现在对象是有生命周期的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;由上2点可以看出，实体并非一定是映射到我们现实世界的某个具体事物&lt;/li&gt;
&lt;li&gt;生成实体唯一标识的 4 种方法&lt;ul&gt;
&lt;li&gt;用户提供一个或者多个初始唯一值作为输入时&lt;/li&gt;
&lt;li&gt;程序内部通过某种算法自动生成身份标识，例如UUID、雪花ID等&lt;/li&gt;
&lt;li&gt;程序依赖于持久化存储，比如数据库生成的自增主键&lt;/li&gt;
&lt;li&gt;通过其他的限界上下文决定出的唯一标识，作为程序的输入。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实体不变性&lt;ul&gt;
&lt;li&gt;一个实体维护了一个或者多个不变条件&lt;/li&gt;
&lt;li&gt;不变条件主要是由聚合所关注&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="架构" scheme="http://xtestw.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="DDD" scheme="http://xtestw.com/tags/DDD/"/>
    
  </entry>
  
  <entry>
    <title>Ha3 学习笔记</title>
    <link href="http://xtestw.com/2021/02/28/Ha3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://xtestw.com/2021/02/28/Ha3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-02-28T10:07:13.000Z</published>
    <updated>2024-12-31T17:54:51.723Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;整体架构&quot;&gt;&lt;a href=&quot;#整体架构&quot; class=&quot;headerlink&quot; title=&quot;整体架构&quot;&gt;&lt;/a&gt;整体架构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/Ha3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210228184558960.png&quot; alt=&quot;image-20210228184558960&quot;&gt;&lt;/p&gt;
&lt;p&gt;ha3本身是阿里系针对自己的场景自己研发的搜索引擎平台，也是基于自身的技术积累之上构建的，包括依赖的系统和代码库，都是自研自足的。经历了近10年的发展，也经受了核心场景双十一的考验，已经是一套非常完善成熟的系统，值得学习和研究。 图中为ha3的基本架构，比较简洁，主要分为数据源聚合(俗称 dump)、全量/增量/实时索引构建及在线服务等部分，其中数据源聚合在 tisplus 平台和 Blink 平台完成，核心有以下几个模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QRS&lt;ul&gt;
&lt;li&gt;输入的查询解析/校验，转发searcher&lt;/li&gt;
&lt;li&gt;searcher 结果合并加工返回用户&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Searcher&lt;ul&gt;
&lt;li&gt;文档召回服务，包含打分/排序/summary&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Build Service&lt;ul&gt;
&lt;li&gt;全量/增量/实时索引构建，提供给在线服务使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他&lt;ul&gt;
&lt;li&gt;hippo: 调度系统，分配机器&lt;/li&gt;
&lt;li&gt;suez/suze_ops，引擎管控/任务分发&lt;/li&gt;
&lt;li&gt;deploy express，用于分发包，索引，配置等数据&lt;/li&gt;
&lt;li&gt;swift，消息队列&lt;/li&gt;
&lt;li&gt;cm2/vipserver，域名解析/服务发现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="搜索引擎" scheme="http://xtestw.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>Blink学习笔记</title>
    <link href="http://xtestw.com/2021/02/28/Blink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://xtestw.com/2021/02/28/Blink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-02-28T08:37:08.000Z</published>
    <updated>2024-12-31T17:54:51.770Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;Blink 其实是阿里内部基于 flink 改造的系统，学习 Blink 首先要学习 flink 相关的知识，先了解一下 flink 产生的背景和要解决的问题。&lt;/p&gt;
&lt;p&gt;在大数据开始爆发的时代，mapreduce 作为初代的计算引擎，提供了分布式计算的核心思想，map&amp;amp;reduce的分阶段处理。但是 map reduce 本质上还是批处理计算框架，随着业务发展，流式数据计算处理的需求越来越旺盛，storm 等应运而生，但是作为第一代流式计算框架，存在一些设计上的缺陷，包括 exactly once等语义的支持。而且批处理和流处理作为处理同一个业务逻辑的两套系统，需要维护两套代码，并不是很友好。而这个时候 spark也发展起来了，集批处理，流处理，SQL 功能，图计算，机器学习于一身，并且支持 SparkR 和 PySpark 来做科学计算。而同时支持流处理和批处理的计算引擎，只有2个选择，除了spark 便是 flink。&lt;/p&gt;</summary>
    
    
    
    <category term="大数据" scheme="http://xtestw.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大数据" scheme="http://xtestw.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>nextjs静态页面github pages资源文件404</title>
    <link href="http://xtestw.com/2021/02/12/nextjs%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2github-pages%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6404/"/>
    <id>http://xtestw.com/2021/02/12/nextjs%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2github-pages%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6404/</id>
    <published>2021-02-12T14:47:08.000Z</published>
    <updated>2024-12-31T17:54:10.429Z</updated>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;通过把nextjs的静态文件放到github pages上，省一波流量钱，但是发现资源文件总是会404，本来以为是github pages构</summary>
      
    
    
    
    <category term="FE" scheme="http://xtestw.com/categories/FE/"/>
    
    
    <category term="FE" scheme="http://xtestw.com/tags/FE/"/>
    
  </entry>
  
  <entry>
    <title>国内NextJs代理支持amp</title>
    <link href="http://xtestw.com/2021/02/12/%E5%9B%BD%E5%86%85NextJs%E4%BB%A3%E7%90%86%E6%94%AF%E6%8C%81amp/"/>
    <id>http://xtestw.com/2021/02/12/%E5%9B%BD%E5%86%85NextJs%E4%BB%A3%E7%90%86%E6%94%AF%E6%8C%81amp/</id>
    <published>2021-02-12T14:31:43.000Z</published>
    <updated>2024-12-31T17:54:51.745Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近学习了一下 nextjs，用这个写了个小网站 cushiwen.cn.  过程中发现 nextjs 天然支持 amp，虽然只有css-in-js的方式支持css， 但是还是很方便的，就尝试了一下。 发现过程中总是出现以下错误：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Error: Unable to fetch https://cdn.ampproject.org/v0/validator.js - connect ETIMEDOUT 172.217.27.129:443&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at ClientRequest.&amp;lt;anonymous&amp;gt; (/Users/xxx/xtestw/xxx/fe-xxx/node_modules/next/dist/compiled/amphtml-validator/index.js:1:1159)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at ClientRequest.emit (node:events:329:20)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at TLSSocket.socketErrorListener (node:_http_client:478:9)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at TLSSocket.emit (node:events:329:20)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at emitErrorNT (node:internal/streams/destroy:188:8)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at emitErrorCloseNT (node:internal/streams/destroy:153:3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at processTicksAndRejections (node:internal/process/task_queues:80:21)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这就很尴尬了， 我自己架了个ss的代理，但是node本身的请求没有走代理，需要解决这个问题。&lt;/p&gt;
&lt;p&gt;大概有几种解法吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VPN的方式架梯子，成本有点高&lt;/li&gt;
&lt;li&gt;Charles 全局代理捕获，自定义 response (未验证，理论可行)&lt;/li&gt;
&lt;li&gt;node全局代理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文讨论最后一种的解法&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h2&gt;&lt;p&gt;查找了一些资料，通过&lt;code&gt;global-agent&lt;/code&gt;来实现。其实现主要通过系统环境变量来实现的 主要步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装 &lt;code&gt;global-agent&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yarn add &lt;span class=&quot;variable language_&quot;&gt;global&lt;/span&gt;-agent&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加引用&lt;/p&gt;
&lt;p&gt;在需要的页面里面添加引用，我是在 _app.tsx 文件添加的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="FE" scheme="http://xtestw.com/categories/FE/"/>
    
    
    <category term="FE" scheme="http://xtestw.com/tags/FE/"/>
    
  </entry>
  
  <entry>
    <title>UndeclaredThrowableException原因</title>
    <link href="http://xtestw.com/2021/01/17/UndeclaredThrowableException%E5%8E%9F%E5%9B%A0/"/>
    <id>http://xtestw.com/2021/01/17/UndeclaredThrowableException%E5%8E%9F%E5%9B%A0/</id>
    <published>2021-01-17T07:33:20.000Z</published>
    <updated>2024-12-31T17:54:51.788Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;UndeclaredThrowableException-原因&quot;&gt;&lt;a href=&quot;#UndeclaredThrowableException-原因&quot; class=&quot;headerlink&quot; title=&quot;UndeclaredThrowableException 原因&quot;&gt;&lt;/a&gt;&lt;em&gt;UndeclaredThrowableException&lt;/em&gt; 原因&lt;/h1&gt;&lt;p&gt;RPC 请求的时候抛出该异常，异常点是 RPC 调用的地方抛出的该异常，除此之外没有其他的异常信息。仔细排查，实际的异常应该是网络IO的TIMEOUT导致的。 那么，就有2个问题需要探讨：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为啥抛出的是&lt;em&gt;&lt;strong&gt;UndeclaredThrowableException&lt;/strong&gt;&lt;/em&gt;，而不是 &lt;em&gt;&lt;strong&gt;TimeOut&lt;/strong&gt;&lt;/em&gt; 的 Exception&lt;/li&gt;
&lt;li&gt;如何抛出 &lt;em&gt;&lt;strong&gt;TimeOut&lt;/strong&gt;&lt;/em&gt; 异常&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;为啥抛出的是UndeclaredThrowableException&quot;&gt;&lt;a href=&quot;#为啥抛出的是UndeclaredThrowableException&quot; class=&quot;headerlink&quot; title=&quot;为啥抛出的是UndeclaredThrowableException&quot;&gt;&lt;/a&gt;为啥抛出的是&lt;em&gt;UndeclaredThrowableException&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;先说结论，之所以抛出这个异常，是因为在RPC调用的实现中，使用了 &lt;em&gt;JDK&lt;/em&gt; 动态代理的原因。在 &lt;em&gt;JDK Proxy&lt;/em&gt; 的调用中，如果实际运行时(&lt;em&gt;InvocationHandler#invoke&lt;/em&gt;) 抛出了某个**受检异常(checked exception)**，但该受检异常并未在被代理对象接口定义中进行声明，那么这个异常就会被 &lt;strong&gt;JVM&lt;/strong&gt;包装成 &lt;em&gt;&lt;strong&gt;UndeclaredThrowableException&lt;/strong&gt;&lt;/em&gt; 进行抛出。&lt;/p&gt;
&lt;p&gt;这里面有个受检异常的概念，简单解释一下，&lt;em&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/em&gt; 中所有异常，都继承自 &lt;em&gt;java.lang.Throwable&lt;/em&gt; 类。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://xtestw.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>GraphQl 使用 - java</title>
    <link href="http://xtestw.com/2019/08/03/GraphQl-%E4%BD%BF%E7%94%A8-java/"/>
    <id>http://xtestw.com/2019/08/03/GraphQl-%E4%BD%BF%E7%94%A8-java/</id>
    <published>2019-08-03T06:26:05.000Z</published>
    <updated>2024-12-31T17:54:51.895Z</updated>
    
    
    <summary type="html">&lt;p&gt;去年在做内容库的时候，涉及到了多系统多数据源互相查询的情景，当时就想要将内容库的所有数据，增加统一的数据接入层，通过graphql的方式提供给上层业务使用，后面受限于人力没有实施。目前从头开始做站群相关的业务，顺带着浅尝了一下graphql，感觉还不错。&lt;/p&gt;
&lt;h2 id=&quot;GraphQL-是什么&quot;&gt;&lt;a href=&quot;#GraphQL-是什么&quot; class=&quot;headerlink&quot; title=&quot;GraphQL 是什么&quot;&gt;&lt;/a&gt;GraphQL 是什么&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;参看:  &lt;a href=&quot;https://www.youtube.com/watch?v=Ah6GSCK5Rfs&quot;&gt;https://www.youtube.com/watch?v=Ah6GSCK5Rfs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;graphql 和 rest api 是同一层的东西，都是一种基于 http 之上的数据接口协议，两者设计理念完全不同。目前来说 graphql 在很多大小厂也都开始使用，确实会方便很多。 但是 rest api 还是最广泛应用的协议，比如 AMP (T T)。 事实上任何东西都有2面性，对于graphql 来说，优缺点都有&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://xtestw.com/categories/Java/"/>
    
    <category term="New Skill" scheme="http://xtestw.com/categories/Java/New-Skill/"/>
    
    <category term="GraphQL" scheme="http://xtestw.com/categories/Java/New-Skill/GraphQL/"/>
    
    
    <category term="graphql" scheme="http://xtestw.com/tags/graphql/"/>
    
    <category term="graphiql" scheme="http://xtestw.com/tags/graphiql/"/>
    
    <category term="github" scheme="http://xtestw.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>HttpURLConnection使用http代理</title>
    <link href="http://xtestw.com/2017/08/13/HttpURLConnection%E4%BD%BF%E7%94%A8http%E4%BB%A3%E7%90%86/"/>
    <id>http://xtestw.com/2017/08/13/HttpURLConnection%E4%BD%BF%E7%94%A8http%E4%BB%A3%E7%90%86/</id>
    <published>2017-08-13T14:38:08.000Z</published>
    <updated>2024-12-31T17:52:20.169Z</updated>
    
    
    <summary type="html">&lt;p&gt;工程中的网络请求，有时会需要使用http代理，比较简单的方法是使用apache的httpclient 直接设置代理，但有的时候使用java自带的HttpURLConnection的时候，就需要注意多线程的问题了。 使用HttpURLConnection 实现代理的方法也很简单，在建立连接之前先设置代理：&lt;/p&gt;
&lt;p&gt;Authenticator.setDefault(authenticator);&lt;/p&gt;
&lt;p&gt;需要注意的是，设置代理的方法并不是使用HttpURLConnection的一个方法，而在建立请求的时候，也没有任何调用和使用 Authenticator的地方，可以猜测这里设置了代理是使用了全局量，跟进Authenticator中去，会发现： &lt;img src=&quot;http://xtestw.site/wp-content/uploads/2017/08/1.png&quot; alt=&quot;1&quot;&gt; &lt;img src=&quot;http://xtestw.site/wp-content/uploads/2017/08/2.png&quot; alt=&quot;2&quot;&gt; 其实setDefault 方法就是设置了一个静态变量，而这个变量被使用的地方在： &lt;img src=&quot;http://xtestw.site/wp-content/uploads/2017/08/3.png&quot; alt=&quot;3&quot;&gt; （三个同名函数，相同的处理）这个静态变量被全局的网络请求所使用，而不是当前连接独占的配置，一般来说，当前网络使用一个http代理的时候没有问题（比如我们就是通过elb代理多个IP出口），但是当我们有多个代理的时候，在多线程环境下就会出现问题，如果代理服务器的账号密码不同，请求的服务球对cookie和ip进行校验的时候，就会比较麻烦，所以需要想办法来让每一个HttpURLConnection独占这个代理配置，直接的方法似乎没有，但是可以折中，同步网络请求过程中，HttpURLConnection是和唯一线程绑定的，我们可以用ThreadLocal,让每个线程独占一个代理配置，从而间接的保证每个HttpURLConnection始终使用一个代理配置。 可以定一个类：&lt;/p&gt;</summary>
    
    
    
    <category term="JAVA" scheme="http://xtestw.com/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>sdk篡改</title>
    <link href="http://xtestw.com/2017/07/23/sdk-e7-af-a1-e6-94-b9/"/>
    <id>http://xtestw.com/2017/07/23/sdk-e7-af-a1-e6-94-b9/</id>
    <published>2017-07-23T12:51:22.000Z</published>
    <updated>2024-12-31T17:54:10.495Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;前段时间，因为一年前篡改了一个sdk的包，导致了一系列不可预知的损失，这也充分说明了技术的正确性，需要决策的正确性来支撑的。作为技术人员，不仅仅要考虑技术的可行性，也要考虑实施后的风险和结果的预期假设。 从工程角度，简单记录一下篡改sdk包的技术。&lt;/p&gt;
&lt;ol&gt;
&lt;li</summary>
      
    
    
    
    <category term="JAVA" scheme="http://xtestw.com/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>RSA整理</title>
    <link href="http://xtestw.com/2016/05/24/rsa-e6-95-b4-e7-90-86/"/>
    <id>http://xtestw.com/2016/05/24/rsa-e6-95-b4-e7-90-86/</id>
    <published>2016-05-24T15:17:24.000Z</published>
    <updated>2024-12-31T17:54:51.734Z</updated>
    
    
    <summary type="html">&lt;p&gt;最近的论文用到了RSA相关的东西，做一个整理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#toc_0&quot;&gt;RSA&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;  &lt;a href=&quot;#toc_1&quot;&gt;流程图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  &lt;a href=&quot;#toc_2&quot;&gt;选取2个质数p、q&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  &lt;a href=&quot;#toc_3&quot;&gt;计算n = p * q&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  &lt;a href=&quot;#toc_4&quot;&gt;计算欧拉函数 φ(n)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  &lt;a href=&quot;#toc_5&quot;&gt;选择加密密钥 e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  &lt;a href=&quot;#toc_6&quot;&gt;计算解密密钥 d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  &lt;a href=&quot;#toc_7&quot;&gt;加密解密&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;流程图&quot;&gt;&lt;a href=&quot;#流程图&quot; class=&quot;headerlink&quot; title=&quot;流程图&quot;&gt;&lt;/a&gt;流程图&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;  密钥生成过程： &lt;img src=&quot;http://imgdata.hoop8.com/1605/3863736210165.png&quot; alt=&quot;RSA&quot;&gt;&lt;/li&gt;
&lt;li&gt;  加密解密过程： &lt;img src=&quot;http://imgdata.hoop8.com/1605/1503736210165.png&quot; alt=&quot;RSA&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;选取2个质数p、q&quot;&gt;&lt;a href=&quot;#选取2个质数p、q&quot; class=&quot;headerlink&quot; title=&quot;选取2个质数p、q&quot;&gt;&lt;/a&gt;选取2个质数p、q&lt;/h2&gt;&lt;p&gt;\(RSA\)算法的主要就是基于一个十分简单的数论事实：将两个大素数相乘十分容易，但是想要对其乘积进行因式分解却极其困难。 同时为了增强强度，\(p-1\)和\(q-1\)的最大公因子要小 质数的选取方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  随机搜索法随机产生一个奇数 \(p_1\) 进行素数测试,若是素数,则结束;否则,重新随机产生一个奇数 \(p_2\) 进行素性测试,直至找到一个素数 \(p_t\)。&lt;/li&gt;
&lt;li&gt;  随机递增搜索法随机产生一个奇数,对以该数为起点的奇数依次进行测试,直至找到一个素数。这种方法相对于随机搜索法，在速度上有一定的提高，但是并没有本质上的区别&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Theory" scheme="http://xtestw.com/categories/Theory/"/>
    
    
    <category term="RSA" scheme="http://xtestw.com/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>c++对象模型</title>
    <link href="http://xtestw.com/2016/05/05/cplusplusobjectmodel/"/>
    <id>http://xtestw.com/2016/05/05/cplusplusobjectmodel/</id>
    <published>2016-05-04T16:22:50.000Z</published>
    <updated>2024-12-31T17:54:10.510Z</updated>
    
    
    <summary type="html">&lt;p&gt;最近在看《深度探索c++对象模型》对于对象模型有了一点了解，做一个总结。以下的一些结论的实验见：&lt;a href=&quot;https://github.com/xtestw/CPPObjModelTest&quot;&gt;https://github.com/xtestw/CPPObjModelTest&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#toc_0&quot;&gt;c++对象模型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;  &lt;a href=&quot;#toc_1&quot;&gt;单个对象模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#toc_2&quot;&gt;单继承对象模型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;  &lt;a href=&quot;#toc_3&quot;&gt;不考虑虚函数的单继承&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  &lt;a href=&quot;#toc_4&quot;&gt;考虑虚函数的单继承&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href=&quot;#toc_5&quot;&gt;多继承对象模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  &lt;a href=&quot;#toc_6&quot;&gt;存在虚基类的对象模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;单个对象模型&quot;&gt;&lt;a href=&quot;#单个对象模型&quot; class=&quot;headerlink&quot; title=&quot;单个对象模型&quot;&gt;&lt;/a&gt;单个对象模型&lt;/h2&gt;&lt;p&gt;对于一个单个对象而言，对象的内部结构是类似于一张表结构，依次存储着c++的对象内部数据，我们都知道，一个c++的类内部一般会包含下面的几个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  非静态成员变量&lt;/li&gt;
&lt;li&gt;  非静态成员函数&lt;/li&gt;
&lt;li&gt;  静态成员变量&lt;/li&gt;
&lt;li&gt;  静态成员函数&lt;/li&gt;
&lt;li&gt;  虚函数&lt;/li&gt;
&lt;li&gt;  友元函数&lt;/li&gt;
&lt;li&gt;  构造函数、析构函数、拷贝构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于一个简单的对象，将设我们定义类如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;base&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;base&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; ~&lt;span class=&quot;built_in&quot;&gt;base&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; a,b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; c,d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;不考虑继承的话，他们的存储结构会是这样的一个结构，如下图： &lt;img src=&quot;http://i.imgur.com/lVYnj2P.png&quot;&gt; 其中，非静态数据成员，被放在对象的内部，而虚函数会放在对象的一个虚表中，对象在编译的时候会形成一个vptr的指针置于对象的内部，其指针指向这张虚表（考虑类的继承和多态，指向这张虚表的vptr的设置和重置会在构造函数、析构函数和拷贝函数中自动完成）。 对象在图对象表中的位置，是按照对象的申明顺序来排列的。比如a,b的申明，因为a先申明的，那么a就被先压栈，占据高地址。 而如图所见，不论虚函数是多少个，对象内部只有一个指针指向它，所以始终占一个指针大小的空间（32位机器下是4byte). 而对这个vptr在对象中的位置，不同的编译器的处理是不一样的，vc为代表的是将其放在了头部，而gcc等则是将其放在了对象的尾部，放在尾部是为了综合考虑与C的struct的兼容问题，而在头部，则是考虑继承之后的子类在调用vptr的方便性。(我个人更偏向于放在头部，因为这样在继承的时候更好理解也更方便自然),本文中的代码和模型是基于g++编译器做的实验，都是放在头部的。 还有一个问题，《深度探索c++对象模型》中，对这个1byte的类的type_info位置，他是说放在虚表的第一个位置，而其实g++中，下面这个实验，并不是放在虚表中的：&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://xtestw.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 技巧：让进程在后台可靠运行的几种方法</title>
    <link href="http://xtestw.com/2016/01/29/linuxrunonbackground/"/>
    <id>http://xtestw.com/2016/01/29/linuxrunonbackground/</id>
    <published>2016-01-29T07:18:00.000Z</published>
    <updated>2024-12-31T17:54:51.712Z</updated>
    
    
    <summary type="html">&lt;p&gt;转自：&lt;a href=&quot;http://www.ibm.com/developerworks/cn/linux/l-cn-nohup/&quot;&gt;http://www.ibm.com/developerworks/cn/linux/l-cn-nohup/&lt;/a&gt; 我们经常会碰到这样的问题，用 telnet/ssh 登录了远程的 Linux 服务器，运行了一些耗时较长的任务， 结果却由于网络的不稳定导致任务中途失败。如何让命令提交后不受本地关闭终端窗口/网络断开连接的干扰呢？下面举了一些例子， 您可以针对不同的场景选择不同的方式来处理这个问题。&lt;/p&gt;
&lt;h2 id=&quot;nohup-setsid-amp&quot;&gt;&lt;a href=&quot;#nohup-setsid-amp&quot; class=&quot;headerlink&quot; title=&quot;nohup/setsid/&amp;amp;&quot;&gt;&lt;/a&gt;nohup/setsid/&amp;amp;&lt;/h2&gt;&lt;h4 id=&quot;场景：&quot;&gt;&lt;a href=&quot;#场景：&quot; class=&quot;headerlink&quot; title=&quot;场景：&quot;&gt;&lt;/a&gt;场景：&lt;/h4&gt;&lt;p&gt;如果只是临时有一个命令需要长时间运行，什么方法能最简便的保证它在后台稳定运行呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5 id=&quot;hangup-名称的来由&quot;&gt;&lt;a href=&quot;#hangup-名称的来由&quot; class=&quot;headerlink&quot; title=&quot;hangup 名称的来由&quot;&gt;&lt;/a&gt;hangup 名称的来由&lt;/h5&gt;&lt;p&gt;在 Unix 的早期版本中，每个终端都会通过 modem 和系统通讯。当用户 logout 时，modem 就会挂断（hang up）电话。 同理，当 modem 断开连接时，就会给终端发送 hangup 信号来通知其关闭所有子进程。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://xtestw.com/categories/Linux/"/>
    
    
    <category term="linux" scheme="http://xtestw.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>x&amp;(-x)取x的最后一个1的证明</title>
    <link href="http://xtestw.com/2015/04/22/proof/"/>
    <id>http://xtestw.com/2015/04/22/proof/</id>
    <published>2015-04-22T10:49:00.000Z</published>
    <updated>2024-12-31T17:54:51.726Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://xtestw.site/?p=29&quot;&gt;http://xtestw.site/?p=29&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##x&amp;amp;(-x)取x的最后一个1的证明##&lt;br&gt;明天要给新队员讲树状数组，避不开的一个证明，之前教主讲过，当时没听明白给忘了- -，只有自己想了一种证明方法。&lt;/p&gt;
&lt;p&gt;#####证明#####&lt;br&gt;大家都知道，计算机是用补码来存储一个数的，在这种编码情况下，整数是自然状态编码，假设我们是一个5位的机器（只是假设），那么1，编码就为00001, 而-1的编码则是11111(并不是10001)，在这种情况下，我们会有下面的结论：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;             -x=11111 – x +1 (x 假设为正数二进制)  -----------------结论一
              x=00000 + x (x 假设为正数二进制) ----------------------结论二
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们还会有以下2个结论：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;结论三：11111 - x 不会出现借位的情况(二进制下 ，对应位只会是两种情况 1-0 和 1-1)
结论四：00000 + x 不会出现进位的情况（二进制下，对应位只会是 0+1,0+0）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;假设 x的二进制编码为 x1 x2 x3 x4 x5&lt;/p&gt;
&lt;p&gt;那么我们就会发现 对于任何一位(以x1为例) 0+x1 和 1-x1 两个 必然是一个为1 一个为0，因为：&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;&lt;td&gt;X1的值&lt;/td&gt;    &lt;td&gt;0+x1&lt;/td&gt;    &lt;td&gt;1-x1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;    &lt;td&gt;0&lt;/td&gt;    &lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;    &lt;td&gt;1&lt;/td&gt;    &lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;</summary>
    
    
    
    <category term="ACMICPC" scheme="http://xtestw.com/categories/ACMICPC/"/>
    
    
  </entry>
  
  <entry>
    <title>c++ 子类要正确的调用父类构造函数</title>
    <link href="http://xtestw.com/2015/04/05/cplusplus/"/>
    <id>http://xtestw.com/2015/04/05/cplusplus/</id>
    <published>2015-04-04T22:36:00.000Z</published>
    <updated>2024-12-31T17:54:10.443Z</updated>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="C++" scheme="http://xtestw.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>c++ 默认构造函数</title>
    <link href="http://xtestw.com/2015/04/03/c++%20%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://xtestw.com/2015/04/03/c++%20%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</id>
    <published>2015-04-03T05:37:00.000Z</published>
    <updated>2024-12-31T17:52:20.172Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;关于c++构造函数两个误解&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;任何class只要没有定义构造函数，就会被编译器自动合成一个。 有些构造函数在实际中有和没有是没有任何用处的，所以无用的构造函数是不会被构建出来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="C++" scheme="http://xtestw.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>hibernate ID 生成方式</title>
    <link href="http://xtestw.com/2015/02/10/hibernate%20ID%20%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/"/>
    <id>http://xtestw.com/2015/02/10/hibernate%20ID%20%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/</id>
    <published>2015-02-10T05:08:00.000Z</published>
    <updated>2024-12-31T17:54:10.456Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;1、assigned&quot;&gt;&lt;a href=&quot;#1、assigned&quot; class=&quot;headerlink&quot; title=&quot;1、assigned&quot;&gt;&lt;/a&gt;1、assigned&lt;/h1&gt;&lt;p&gt;主键由外部程序负责生成，在 save() 之前必须指定一个。Hibernate不负责维护主键生成。与Hibernate和底层数据库都无关，可以跨数据库。在存储对象前，必须要使用主键的setter方法给主键赋值，至于这个值怎么生成，完全由自己决定，这种方法应该尽量避免。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;id name=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;generator class=&quot;assigned&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/id&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“ud”是自定义的策略名，人为起的名字，后面均用“ud”表示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点：可以跨数据库，人为控制主键生成，应尽量避免。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;2、increment&quot;&gt;&lt;a href=&quot;#2、increment&quot; class=&quot;headerlink&quot; title=&quot;2、increment&quot;&gt;&lt;/a&gt;2、increment&lt;/h1&gt;&lt;p&gt;由Hibernate从数据库中取出主键的最大值（每个session只取1次），以该值为基础，每次增量为1，在内存中生成主键，不依赖于底层的数据库，因此可以跨数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;id name=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;generator class=&quot;increment&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/id&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hibernate调用org.hibernate.id.IncrementGenerator类里面的generate()方法，使用select max(idColumnName) from tableName语句获取主键最大值。该方法被声明成了synchronized，所以在一个独立的Java虚拟机内部是没有问题的，然而，在多个JVM同时并发访问数据库select max时就可能取出相同的值，再insert就会发生Dumplicate entry的错误。所以只能有一个Hibernate应用进程访问数据库，否则就可能产生主键冲突，所以不适合多进程并发更新数据库，适合单一进程访问数据库，不能用于群集环境。&lt;/p&gt;</summary>
    
    
    
    <category term="JAVA" scheme="http://xtestw.com/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>windows核心编程-错误处理</title>
    <link href="http://xtestw.com/2015/01/29/windows-e6-a0-b8-e5-bf-83-e7-bc-96-e7-a8-8b-e9-94-99-e8-af-af-e5-a4-84-e7-90-86/"/>
    <id>http://xtestw.com/2015/01/29/windows-e6-a0-b8-e5-bf-83-e7-bc-96-e7-a8-8b-e9-94-99-e8-af-af-e5-a4-84-e7-90-86/</id>
    <published>2015-01-29T06:04:00.000Z</published>
    <updated>2024-12-31T17:52:20.211Z</updated>
    
    
      
      
    <summary type="html">&lt;p&gt;1.常见的错误返回类型&lt;/p&gt;
&lt;p&gt;VOID/BOOL/HANDLE/PVOID/LONG/DWORD VOID 不可能失败 BOOL 错误返回false 编码的时候最好测试是否不为FALSE HANDLE 错误 NULL/INVALID_HANDLE_VALUE PVO</summary>
      
    
    
    
    <category term="ACMICPC" scheme="http://xtestw.com/categories/ACMICPC/"/>
    
    
    <category term="windows" scheme="http://xtestw.com/tags/windows/"/>
    
  </entry>
  
</feed>
